call pathogen#runtime_append_all_bundles()

set nocompatible
set hidden
set history=1000
set number
set numberwidth=5
set ruler
set nocursorline
set laststatus=2
set autoread

" We have to set a winheight bigger than we want to set winminheight, but if
" we set winheight to be huge before winminheight then the winminheight will
" fail.
set winheight=5
set winminheight=5
set winheight=999

" Set encoding
set encoding=utf-8

" Whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:❤\ ,eol:¬,trail:·

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

set backup
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn
set wildmenu

" Use modeline overrides
set modeline
set modelines=10

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORS!
syntax on
set t_Co=256
set background=dark
color mine

let mapleader=","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clear the search buffer when hitting return (OMG YES)
:nnoremap <silent> <CR> :nohlsearch<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Delete empty lines at the end of file on save
function! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  :%s/\_s*\%$//e
  call cursor(l, c)
endfunction

" CUSTOM AUTOCMDs
augroup vimrcEx
  autocmd!
  autocmd FileType text setlocal wrap wm=2 textwidth=78

  " Remember last location in file
  autocmd BufReadPost *
   \ if line("'\"") > 0 && line("'\"") <= line("$") |
   \ exe "normal g'\"" |
   \ endif

  " Delete trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e
  autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()

  " make uses real tabs
  autocmd FileType make set noexpandtab

  " Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

  " Reload file when entering a buffer
  au FocusGained,BufEnter * :silent! !
augroup END

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Open an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" (Useful for debugging, but not used much anymore.)
" Show syntax highlighting groups for word under cursor
" nmap <C-S-P> :call <SID>SynStack()<CR>
" function! <SID>SynStack()
"   if !exists("*synstack")
"     return
"   endif
"   echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
" endfunc

" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" function! Preserve(command)
"   " Preparation: save last search and cursor position
"   let _s=@/
"   let l = line(".")
"   let c = col(".")
"   " Do the business
"   execute a:command
"   " Clean up: restore previous search history and cursor position
"   let @/=_s
"   call cursor(l, c)
" endfunction
" nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TEST ALL THE THINGS!
function! RunTestFile()
  :wa
  exec ":!smarttest %"
endfunction

function! RunFocusedFeatureFile()
  :wa
  exec ":!bundle exec cucumber % --tags @dev"
endfunction

function! RunRubocopFile()
  if &filetype == 'ruby'
    :wa
    exec ":!./bin/rubocop %"
  else
    echoerr "Excuse me, I have to go. Somewhere there is a crime happening."
  end
endfunction

map <Leader>c :call RunRubocopFile()<CR>
map <Leader>t :call RunTestFile()<CR>
map <Leader>f :call RunFocusedFeatureFile()<CR>

" Load separate config files for plugins
for f in split(glob('~/.vim/config/*.vim'), '\n')
  exe 'source' f
endfor

" Include local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
